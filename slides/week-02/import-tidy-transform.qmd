---
title: "Tidyverse: Import, tidy, and transform"
subtitle: "Week 2"
author: "David Schweizer"
date: "March 20, 2023"
date-format: long
institute: "University of Mannheim"
format: 
  revealjs:
    theme: simple
    slide-number: c/t #< collapsed/total
    footer: "Statistics | Summer Semester 2024 | University of Innsbruck"
editor: visual
---

```{r packages, include=FALSE}
pacman::p_load(
  "tidyverse",
  "gapminder",
  "xlsx",
  "haven",
  "knitr"
)
```

## Plan for today

::: panel-tabset
## Session 03

![Data project workflow from R for Data Science](workflow.png){alt="Data project workflow from R for Data Science"}

## Break

⏸️ **15 minute break:** Get some fresh air, a coffee, ...

## Session 04

-   **Input**
    -   So far:

        -   import, select, filter, and mutate data

        Now:

        -   reshape, group & summarize, join, and save data
-   **Your turn**!
:::

# Session 03

## Data wrangling ...

... includes all steps to prepare our data for visualization, modeling, and analysis:

-   importing data

-   subsetting (selecting) our data

-   renaming variables or recode values

-   creating new variables

... will account for most of the time spent on your data project!

## tidyverse

![](tidyverse.jpg)

## dplyr

::: columns
::: {.column width="20%"}
![](dplyr.jpg)
:::

::: {.column width="80%"}
The dplyr package provides us with the *verbs* to wrangle our data:

-   *select()*

-   *filter()*

-   *mutate()*

-   *group_by()*

-   *summarize()*

-   ... and many more!
:::
:::

## Tidyverse: Concepts

There is much more to the tidyverse, but two important concepts that you should be familiar with, if you want to use it, are:

-   **Tidy data**

-   **Pipes**

## Tidy data

Tidy refers to the **structure of the data**.

::: panel-tabset
## Variables

Each variable has its own column.

![](tidy11.png)

## Observations

Each observation has its own row.

![](tidy12.png)

## Values

Each value has its own cell.

![](tidy13.png)
:::

## Pipes

Usually, in R we apply functions as follows:

```{r, echo=TRUE, eval=FALSE}
f(x)
```

In the logic of pipes this function is written as:

```{r, echo=TRUE, eval=FALSE}
x %>% f(.)
```

Here, object x is *piped* into function f, becoming (by default) its first argument. We can use pipes with more than one function, too:

```{r, echo=TRUE, eval=FALSE}
x %>%    
  f_1() %>%    
  f_2() %>%    
  f_3()
```

## Pipes

The %\>% pipe used in the tidyverse is part of the [*magrittr package*](https://magrittr.tidyverse.org/) which also includes other specialized types of pipes.

-   RStudio offers a keyboard shortcut for inserting the %\>% pipe: *Ctrl + Shift + M (Windows & Linux)/Cmd + Shift + M (Mac)*

-   Since version 4.1.0, base R also offers its own pipe *\|\>*, which is similar to but not the same as the %\>% pipe

# Importing data

## Importing data manually

::: panel-tabset
## Choose file format

![](import1.png){width="875"}

## Choose file

![](import2.png){width="867"}
:::

## Importing files

-   **R:** use `load("filename.RData")` or `readRDS("filename.RDS")`.

-   **Excel:** e.g., load `library("xlsx")` and use `read.xlsx("filename.xlsx")`.

-   **Stata:** e.g., load `library("haven")` and use `read_dta("filename.dta")`.

Consult the R documentation (e.g. type `?read.xlsx`) to get an overview about options (e.g. `sheetIndex` or `startRow`).Tidy & Transform

## Import GLES wave 25

```{r, echo=TRUE}
# we load the haven package to import Stata files
library(haven)

# we store the data in the object "gles_25"
gles_25 <- read_dta("ZA7731_sA_v1-0-0.dta")

# let's check the class of our object
dim(gles_25)

# and it's dimensions
class(gles_25)
```

## Inspect GLES wave 25

```{r, echo=TRUE}
# let's have a look at a subset of the data
gles_25[1:10,1:7]
```

## Inspect GLES wave 25

```{r, echo=TRUE}
# let's have a look at a subset of the data
# alternatively, you can use: names(gles_25)[1:50]
colnames(gles_25)[1:50] 
```

## Renaming

::: panel-tabset
## General

As you have seen, not all variable names are informative or they are quite long. This complicates the coding process for us and reviewers. We want:

-   short,

-   and informative variable names

## base R

```{r, echo=TRUE}
# we rename only column 22
colnames(gles_25)[22] <- "ego_state_measures_inequality"

# let's check if it worked
colnames(gles_25)[22:23]

# we can also rename multiple columns at once:
colnames(gles_25)[22:23] <- c("ego_state_measures_inequality",
                              "ego_state_no_economy")

# let's check if it worked
colnames(gles_25)[22:23]
```

## dplyr

```{r, include = FALSE}
gles_25 <- read_dta("ZA7731_sA_v1-0-0.dta")
```

```{r, echo = TRUE}
gles_25_new <- gles_25 %>% 
  # rename: new = old
  rename(ego_state_measures_inequality = kp25_2880d)

colnames(gles_25)[22:23]

gles_25_new <- gles_25 %>% 
  # rename: new = old 
  # rename multiple variables at once
  rename(ego_state_measures_inequality = kp25_2880d,
         ego_state_no_economy = kp25_2880g)

colnames(gles_25)[22:23]
```
:::

## Selecting

::: panel-tabset
## General

Usually, we do not want to work with the full data set. For example, we do not need all of the 201 variables of the GLES wave 25. Therefore, we subset our data.

This also requires that we have engaged with the data set and the codebook (if available).

## base R

In base R, there are multiple ways to subset the data.

```{r, echo=TRUE}
gles_new <- gles_25[,1:10]
```

## dplyr

```{r, echo=TRUE}
# we can subset the data using the select() verb

gles_select <- gles_25 %>% 
  select(study:kp25_011a)
```
:::

## Select and Rename in one step

```{r, echo = TRUE}
gles <- gles_25 %>% 
  # select(new_nam = old_name)
  select(pol_interest_country = kp25_011a,
         pol_interest_state = kp25_011b)
```

## Filtering

::: panel-tabset
## General

Filtering refers to rows instead of columns. We want to only include (or exclude) a specific set of observations.

Therefore, we need to use comparison or logical operators (e.g, ==, &, ...).

## base R

```{r, echo = TRUE}
gles_filter <- gles[gles$pol_interest_state == 5,]

dim(gles_filter)
```

## dplyr

```{r, echo = TRUE}
# we can use the filter() verb
gles_filter <- gles %>% 
  filter(pol_interest_state == 5)

dim(gles_filter)
```
:::

## Adding logical operators

```{r, echo=TRUE}
# now, we want to filter depending on political interest on the state and country level

gles_filter <- gles %>% 
  filter(pol_interest_state == 5 & pol_interest_country == 5 )

dim(gles_filter)
```

## Mutating - Class

::: panel-tabset
## General

Oftentimes, we want to transform the class of our variables. E.g., transform a character variable ("2024") to a numeric one ("2024).

In base R, there is: *as.numeric(), as.character(), as.factor(), and as.logical()*

## base R

```{r, echo = TRUE}
# Let's test this:
class(gles$pol_interest_state)

# what values are there?
table(gles$pol_interest_state)

# change them to character
gles$character_test <- as.character(gles$pol_interest_state)

class(gles$character_test)

```

## dplyr

```{r, echo = TRUE}
# We can do the same using mutate() in dpylr:
gles <- gles %>% 
  mutate(character_test = as.character(pol_interest_state))

# let's check it
class(gles$character_test)
```
:::

## Recoding

::: panel-tabset
## General

Sometimes, we might want to recode specific values. For example, we do not want to display numeric values but their labels. We can solve this using the *recode()* verb. But as always, we have multiple possibilities to do so.

## Get labels

```{r, echo = TRUE}
# get value labels
table(gles_25$kp25_050k)
```

## dplyr

```{r, echo=TRUE}
# Now we can recode (some of) the values
gles_25_recode <- gles_25 %>% 
  mutate(new = case_when(kp25_050k == -99 ~ NA,
                         TRUE ~ kp25_050k))

table(gles_25_recode$new)
```
:::

# Your turn!

# ⏸️ 15 minute break

# ▶️ Session 04

## Our workflow so far...

::: panel-tabset
## Import

```{r, echo=TRUE}
# 2021 German federal election data (.csv)

election <- readr::read_delim("w-btw21_kerg2.csv", 
                       delim = ";", 
                       escape_double = FALSE, 
                       locale = locale(decimal_mark = ","), 
                       trim_ws = TRUE, 
                       skip = 9)

str(election) # and/or dim(), head(), names(), ...
```

## Select & Rename

```{r, echo=TRUE}
election <- election %>% 
  dplyr::select(area_no = Gebietsnummer,
                area_type = Gebietsart,
                area_name = Gebietsname,
                group_type = Gruppenart,
                group_name = Gruppenname,
                vote = Stimme,
                vote_share = Prozent)

names(election)
```

## Filter

```{r, echo=TRUE}
# keep vote shares of the AfD on the district level
afd <- election %>% 
  filter(area_type == "Wahlkreis") %>% 
  filter(group_name == "AfD")

# we can achieve the same in one line
afd <- election %>% 
  filter(area_type == "Wahlkreis" & group_name == "AfD")
```

## Mutate

```{r, echo=TRUE}
# calculate the difference between the first and second vote
afd_diff <- afd %>%
  pivot_wider(names_from = "vote", 
              values_from = "vote_share") %>% 
  mutate(diff = `1` - `2`) %>% 
  pivot_longer(cols = !c(area_no:group_name), 
               names_to = "vote", 
               values_to = "vote_share")
```

## 
:::

## Exkurs: Reshape data

::: panel-tabset
## Overview

[![](Screenshot%202024-03-05%20114951.jpg){width="855"}](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)

## To wide

```{r, include=F}
library(gapminder)

gapminder_example <- gapminder %>% 
  select(country, year, gdpPercap) %>% 
  filter(country %in% c("Germany", "France", "United Kingdom")) %>%
  filter(year %in% c(2007, 2002, 1997))
```

```{r, echo=TRUE}
head(gapminder_example)

gapminder_wide <- gapminder_example %>% 
  pivot_wider(names_from = year,
              names_prefix = "year_",
              values_from = gdpPercap)
```

## To long

```{r, echo=TRUE}
head(gapminder_wide)

gapminder_long <- gapminder_wide %>% 
  pivot_longer(cols = year_1997:year_2007,
               names_to = "year",
               names_prefix = "_year",
               values_to = "gdpPercap")
```

## Compared

```{r, echo=TRUE}
head(gapminder_long)

head(gapminder_wide)
```
:::

## Next: Group & summarize

So far:

-   We can generate new variables using *mutate()* keeping the structure of the data the same

With *summarize():*

-   we change the structure of our data frame;

-   any computations using *summarize()* collapses rows to summary statistics (e.g., mean, standard deviation);

-   and removes all variables irrelevant for computing the summary statistics.

## Example: Summary statistics - mutate()

```{r, echo=TRUE}
afd_mean <- afd %>% 
  filter(vote == 2) %>% 
  mutate(mean = mean(vote_share))

dim(afd)
dim(afd_mean)
```

## Summarize()

```{r, echo=TRUE}
afd_mean <- afd %>% 
  filter(vote == 2) %>% 
  summarize(mean = mean(vote_share)) # option: "na.rm = TRUE"

afd_mean
```

## Summarize()

```{r, echo=TRUE}
afd_statistics <- afd %>% 
  filter(vote == 2) %>% 
  summarize(mean = mean(vote_share),      # option: "na.rm = TRUE"
            median = median(vote_share),
            minimum = min(vote_share),
            maximum = max(vote_share),
            sd = sd(vote_share)) 

afd_statistics
```

## Group and summarize

We can use *group_by()* to calculate summary statistics for different groups:

```{r, echo=TRUE}
statistics_group <- election %>% 
  filter(area_type == "Wahlkreis") %>% 
  filter(vote == 2) %>% 
  filter(group_name %in% c("SPD", "CDU")) %>% 
  group_by(group_name) %>%  # do not forget to ungroup()
  summarize(mean = mean(vote_share,
                        na.rm = TRUE))

statistics_group
```

## Join data

In applied research, we oftentimes need to combine multiple data sets (e.g., multiple survey waves, election statistics, ...).

-   We can use *bind_cols()* if two (or more) data frames have different variables (columns) but same cases (rows).

-   We can use *bind_rows()* if two (or more) data frames have the same variables (columns) but different cases (rows).

We can also use *join* operators from the dplyr package. These allow us to combine data frames based on a (shared) *key*.

## Binding columns

::: panel-tabset
## Data 1

```{r, echo=TRUE}
# Let's use our gapminder_example data
head(gapminder_example)

```

## Data 2

```{r, echo=TRUE}
# and add this dataframe
random <- data.frame(r1 = c(1:9))

random
```

## bind_cols

```{r, echo=TRUE}
# now we can just join these two dataframes
new <- bind_cols(gapminder_example, random)

new
```
:::

## Binding rows

::: panel-tabset
## Data 1

```{r, echo = TRUE}
# Let's use our gapminder_example data
head(gapminder_example)

```

## Data 2

```{r, echo=TRUE}
# and add this dataframe
more_info <- data.frame(country = "Austria",
                        year = 2007,
                        gdpPercap = NA)

more_info
```

## bind_rows

```{r, echo=TRUE}
# now we can just join these two dataframes
gapminder_added <- bind_rows(gapminder_example, more_info)

gapminder_added
```
:::

## Join data frames: left_join()

Other joins: <https://github.com/gadenbuie/tidyexplain>

[![](left-join.gif)](https://github.com/gadenbuie/tidyexplain)

## Example: left_join()

::: panel-tabset
## Election

```{r, echo=TRUE}
election <- readr::read_delim("w-btw21_kerg2.csv", 
                       delim = ";", escape_double = FALSE, 
                       locale = locale(decimal_mark = ","), 
                       trim_ws = TRUE, skip = 9) %>% 
  dplyr::select(area_no = Gebietsnummer,
                area_type = Gebietsart,
                area_name = Gebietsname,
                group_type = Gruppenart,
                group_name = Gruppenname,
                vote = Stimme,
                vote_share = Prozent) %>% 
  filter(area_type == "Wahlkreis" & group_name == "AfD" & vote == 2)
```

## Structural

```{r, echo=TRUE}
structural <- readr::read_delim("btw21_strukturdaten.csv", 
                                delim = ";", escape_double = FALSE,
                                locale = locale(decimal_mark = ","),
                                trim_ws = TRUE, skip = 8) %>% 
  dplyr::select(area_no = `Wahlkreis-Nr.`,
                unemployment_rate = `Arbeitslosenquote Februar 2021 - insgesamt`) %>% 
  filter(area_no <= 299)
```

## Join

```{r, echo=TRUE}
election_structural <- election %>% 
  left_join(structural, by = "area_no") %>% 
  select(area_no, area_name, vote_share, unemployment_rate)

head(election_structural)
```
:::

## Save your data

We can easily save our data frame:

```{r, echo=TRUE, eval=FALSE}
save(election_structural,
     file="election_structural.Rda")
```

And load it again:

```{r, echo=TRUE, eval=FALSE}
# make sure that you are in the right working directory!
# Session -> Set working directory
load("election_structural.Rda")
```

# Your turn!
